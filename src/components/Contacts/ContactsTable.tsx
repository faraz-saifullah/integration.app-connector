import { useMemo } from 'react';
import {
  useReactTable,
  getCoreRowModel,
  flexRender,
  ColumnDef,
} from '@tanstack/react-table';

interface Contact {
  id: string;
  name: string;
  hubspotUrl?: string;
  pipedriveUrl?: string;
}

interface ContactsTableProps {
  contacts: Contact[];
}

export function ContactsTable({ contacts }: ContactsTableProps) {
  console.log('Rendering ContactsTable with contacts:', contacts);
  console.log('Contacts length:', contacts.length);

  // Check if contacts are valid objects
  if (!Array.isArray(contacts) || contacts.length === 0) {
    console.warn('No valid contacts received');
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">No contacts found.</p>
      </div>
    );
  }

  const columns = useMemo<ColumnDef<Contact>[]>(
    () => [
      {
        header: '#',
        accessorKey: 'id',
        cell: ({ row }) => <span>{row.index + 1}</span>,
      },
      {
        header: 'Name',
        accessorKey: 'name',
        cell: ({ getValue }) => {
          const name = getValue() as string;
          return name || 'Unnamed Contact';
        },
      },
      {
        header: 'HubSpot URL',
        accessorKey: 'hubspotUrl',
        cell: ({ getValue }) => {
          const url = getValue() as string;
          return url ? (
            <a 
              href={url} 
              target="_blank" 
              rel="noopener noreferrer" 
              className="text-blue-600 hover:underline"
            >
              View in HubSpot
            </a>
          ) : (
            <span className="text-gray-400">-</span>
          );
        },
      },
      {
        header: 'Pipedrive URL',
        accessorKey: 'pipedriveUrl',
        cell: ({ getValue }) => {
          const url = getValue() as string;
          return url ? (
            <a 
              href={url} 
              target="_blank" 
              rel="noopener noreferrer" 
              className="text-blue-600 hover:underline"
            >
              View in Pipedrive
            </a>
          ) : (
            <span className="text-gray-400">-</span>
          );
        },
      },
    ],
    []
  );

  const table = useReactTable({
    data: contacts,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  const rows = table.getRowModel().rows;
  console.log('Table rows:', rows);

  if (rows.length === 0) {
    console.warn('No rows generated by React Table');
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">No contacts found.</p>
      </div>
    );
  }

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          {table.getHeaderGroups().map((headerGroup) => (
            <tr key={headerGroup.id}>
              {headerGroup.headers.map((header) => (
                <th
                  key={header.id}
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  {header.isPlaceholder
                    ? null
                    : flexRender(
                        header.column.columnDef.header,
                        header.getContext()
                      )}
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {rows.map((row) => (
            <tr key={row.id}>
              {row.getVisibleCells().map((cell) => (
                <td
                  key={cell.id}
                  className="px-6 py-4 whitespace-nowrap text-sm text-gray-900"
                >
                  {flexRender(
                    cell.column.columnDef.cell,
                    cell.getContext()
                  )}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
